package data

import (
	"errors"
	"time"

	"github.com/PrinMeshia/medego"
	up "github.com/upper/db/v4"
	"golang.org/x/crypto/bcrypt"
)

type User struct {
	ID        int       `db:"id,omitempty"`
	FirstName string    `db:"first_name"`
	LastName  string    `db:"last_name"`
	Email     string    `db:"email"`
	Active    int       `db:"user_active"`
	Password  string    `db:"password"`
	CreatedAt time.Time `db:"created_at"`
	UpdatedAt time.Time `db:"updated_at"`
	Token     Token     `db:"-"`
}

func (u *User) Table() string {
	return "users"
}

func (u *User) Validate(validator *medego.Validation) {
	validator.Check(u.LastName != "", "last_name", "Last name must be provided")
	validator.Check(u.FirstName != "", "first_name", "First name must be provided")
	validator.Check(u.Email != "", "email", "Email must be provided")
	validator.IsEmail("email", u.Email)
}

func (u *User) GetAll() ([]*User, error) {
	collection := upper.Collection(u.Table())
	var all []*User

	res := collection.Find().OrderBy("last_name")
	if err := res.All(&all); err != nil {
		return nil, err
	}
	return all, nil
}
func (u *User) FindOneBy(field string, value interface{}) (*User, error) {
	var user User
	collection := upper.Collection(u.Table())
	query := up.Cond{field: value}
	res := collection.Find(query)

	if err := res.One(&user); err != nil {
		return nil, err
	}

	token, err := u.getUserToken(user.ID)
	if err != nil {
		return nil, err
	}

	user.Token = token
	return &user, nil
}

func (u *User) Get(id int) (*User, error) {
	var user User
	collection := upper.Collection(u.Table())
	res := collection.Find(up.Cond{"id =": id})
	if err := res.One(&user); err != nil {
		return nil, err
	}
	token, err := u.getUserToken(user.ID)
	if err != nil {
		return nil, err
	}

	user.Token = token
	return &user, nil
}

func (u *User) Update(user User) error {
	user.UpdatedAt = time.Now()
	collection := upper.Collection(u.Table())
	res := collection.Find(user.ID)
	if err := res.Update(&user); err != nil {
		return err
	}
	return nil
}

func (u *User) Delete(id int) error {
	collection := upper.Collection(u.Table())
	res := collection.Find(id)
	if err := res.Delete(); err != nil {
		return err
	}
	return nil
}

func (u *User) Insert(theUser User) (int, error) {
	newHash, err := bcrypt.GenerateFromPassword([]byte(theUser.Password), 12)
	if err != nil {
		return 0, err
	}

	theUser.CreatedAt = time.Now()
	theUser.UpdatedAt = time.Now()
	theUser.Password = string(newHash)

	collection := upper.Collection(u.Table())
	res, err := collection.Insert(theUser)
	if err != nil {
		return 0, err
	}

	id := getInsertID(res.ID())

	return id, nil
}

func (u *User) ResetPassword(id int, password string) error {
	newHash, err := bcrypt.GenerateFromPassword([]byte(password), 12)
	if err != nil {
		return err
	}
	user, err := u.Get(id)
	if err != nil {
		return err
	}
	u.Password = string(newHash)
	return user.Update(*u)
}

func (u *User) PasswordMatches(plainText string) (bool, error) {
	err := bcrypt.CompareHashAndPassword([]byte(u.Password), []byte(plainText))
	if err != nil {
		switch {
		case errors.Is(err, bcrypt.ErrMismatchedHashAndPassword):
			// invalid password
			return false, nil
		default:
			// some kind of error occurred
			return false, err
		}
	}

	return true, nil
}

func (u *User) CheckForRememberToken(id int, token string) bool {
	var rememberToken RememberToken
	rt := RememberToken{}
	collection := upper.Collection(rt.Table())
	res := collection.Find(up.Cond{"user_id": id,"remember_token":token})
	err := res.One(&rememberToken)
	return err == nil 
	
}

func (u *User) getUserToken(userID int) (Token, error) {
	var token Token
	collection := upper.Collection(token.Table())
	res := collection.Find(up.Cond{"user_id =": userID, "expiry >": time.Now()}).OrderBy("created_at desc")
	if err := res.One(&token); err != nil {
		if err != up.ErrNilRecord && err != up.ErrNoMoreRows {
			return Token{}, err
		}
	}
	return token, nil
}
